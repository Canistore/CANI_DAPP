type Attribute = record { key : text; value : text };
type CanisterArgs = variant {
  Upgrade : PlatformUpgradeArgs;
  Init : PlatformInitArgs;
};
type ChannelCategory = variant { Playlist; Radio; Other };
type MusicCategory = variant {
  Emo;
  Ska;
  SoulMusic;
  Britpop;
  CountryMusic;
  PopularMusic;
  Singing;
  EasyListening;
  MusicOfLatinAmerica;
  ElectronicDanceMusic;
  HeavyMetal;
  Funk;
  Jazz;
  KPop;
  Reggae;
  Rock;
  HardRock;
  ChristianMusic;
  SynthPop;
  ProgressiveRock;
  Blues;
  IndieRock;
  PopMusic;
  Grunge;
  HouseMusic;
  Disco;
  FolkMusic;
  WorldMusic;
  NewAgeMusic;
  TranceMusic;
  IndianClassicalMusic;
  ExperimentalMusic;
  SwingMusic;
  Dubstep;
  ElectronicMusic;
  Metal;
  MusicOfAfrica;
  LatinMusic;
  PunkRock;
  DanceMusic;
  RhythmAndBlues;
  VocalMusic;
  ClassicalMusic;
  Bachata;
  Other;
  NewWave;
  Modernism;
  HipHopMusic;
  AlternativeRock;
  Flamenco;
  Techno;
};
type MusicChannel = record {
  id : nat64;
  total_likes : nat64;
  created : nat64;
  sorted : bool;
  owner : principal;
  tracks : vec TrackInfo;
  name : text;
  total_plays : nat64;
  music_type : MusicType;
  updated : nat64;
  category : opt ChannelCategory;
  image : opt text;
};
type MusicType = variant {
  Pop;
  Jazz;
  Reggae;
  Rock;
  Blues;
  HipHop;
  Classical;
  Electronic;
  Other;
  Country;
};
type OssFileInfo = record {
  oss_canister_id : principal;
  track_id : nat64;
  space_canister_id : principal;
  file_id : nat32;
};
type PlatformInitArgs = record {
  ecdsa_key_name : text;
  owner : principal;
  name : text;
  token_expiration : nat64;
  init_channel : bool;
};
type PlatformUpgradeArgs = record {
  owner : opt principal;
  token_expiration : opt nat64;
};
type Result = variant { Ok : blob; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : MusicChannel; Err : text };
type Result_3 = variant { Ok : State; Err : text };
type State = record {
  ecdsa_token_public_key : text;
  next_channel_id : nat64;
  ecdsa_key_name : text;
  owner : principal;
  name : text;
  token_expiration : nat64;
  space_count : nat;
};
type Token = record {
  subject : principal;
  audience : principal;
  policies : text;
};
type TrackInfo = record {
  duration : opt nat64;
  external_url : text;
  animation_url : text;
  name : text;
  album_name : opt text;
  description : text;
  created_at : nat64;
  oss_file_info : opt OssFileInfo;
  audio_url : text;
  likes : nat64;
  artist_name : text;
  attributes : vec Attribute;
  release_at : opt nat64;
  category : opt MusicCategory;
  image : text;
  plays : nat64;
  position : nat64;
};
type WalletReceiveResult = record { accepted : nat64 };
service : (opt CanisterArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  access_token : (principal) -> (Result);
  add_track_to_channel : (nat64, TrackInfo) -> (Result_1);
  batch_add_tracks_to_channel : (nat64, vec TrackInfo) -> (Result_1);
  delete_track_from_channel : (nat64, nat64) -> (Result_1);
  delete_track_from_channel_by_share : (nat64, principal, nat64) -> (Result_1);
  get_channel_info : (nat64) -> (Result_2) query;
  get_channel_list : () -> (vec MusicChannel) query;
  get_platform_info : () -> (Result_3) query;
  sign_access_token : (Token) -> (Result);
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
}