type BucketInfo = record {
  status : int8;
  total_chunks : nat64;
  trusted_eddsa_pub_keys : vec blob;
  managers : vec principal;
  name : text;
  max_custom_data_size : nat16;
  auditors : vec principal;
  total_files : nat64;
  max_children : nat16;
  enable_hash_index : bool;
  max_file_size : nat64;
  folder_id : nat32;
  visibility : nat8;
  max_folder_depth : nat8;
  trusted_ecdsa_pub_keys : vec blob;
  total_folders : nat64;
  file_id : nat32;
};
type CanisterArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type CreateFileInput = record {
  dek : opt blob;
  status : opt int8;
  content : opt blob;
  custom : opt vec record { text; MetadataValue };
  hash : opt blob;
  name : text;
  crc32 : opt nat32;
  size : opt nat64;
  content_type : text;
  parent : nat32;
};
type CreateFileOutput = record { id : nat32; created_at : nat64 };
type CreateFolderInput = record { name : text; parent : nat32 };
type FileInfo = record {
  ex : opt vec record { text; MetadataValue };
  id : nat32;
  dek : opt blob;
  status : int8;
  updated_at : nat64;
  custom : opt vec record { text; MetadataValue };
  hash : opt blob;
  name : text;
  size : nat64;
  content_type : text;
  created_at : nat64;
  filled : nat64;
  chunks : nat32;
  parent : nat32;
};
type FolderInfo = record {
  id : nat32;
  files : vec nat32;
  status : int8;
  updated_at : nat64;
  name : text;
  folders : vec nat32;
  created_at : nat64;
  parent : nat32;
};
type FolderName = record { id : nat32; name : text };
type InitArgs = record {
  name : text;
  default_admin_user : opt principal;
  max_custom_data_size : nat16;
  max_children : nat16;
  enable_hash_index : bool;
  max_file_size : nat64;
  visibility : nat8;
  max_folder_depth : nat8;
  file_id : nat32;
};
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type MoveInput = record { id : nat32; to : nat32; from : nat32 };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec nat32; Err : text };
type Result_10 = variant { Ok : vec FolderInfo; Err : text };
type Result_11 = variant { Ok : UpdateFileOutput; Err : text };
type Result_12 = variant { Ok : UpdateFileChunkOutput; Err : text };
type Result_2 = variant { Ok : CreateFileOutput; Err : text };
type Result_3 = variant { Ok : bool; Err : text };
type Result_4 = variant { Ok : BucketInfo; Err : text };
type Result_5 = variant { Ok : vec FolderName; Err : text };
type Result_6 = variant { Ok : vec record { nat32; blob }; Err : text };
type Result_7 = variant { Ok : FileInfo; Err : text };
type Result_8 = variant { Ok : FolderInfo; Err : text };
type Result_9 = variant { Ok : vec FileInfo; Err : text };
type UpdateBucketInput = record {
  status : opt int8;
  trusted_eddsa_pub_keys : opt vec blob;
  name : opt text;
  max_custom_data_size : opt nat16;
  max_children : opt nat16;
  enable_hash_index : opt bool;
  max_file_size : opt nat64;
  visibility : opt nat8;
  max_folder_depth : opt nat8;
  trusted_ecdsa_pub_keys : opt vec blob;
};
type UpdateFileChunkInput = record {
  id : nat32;
  chunk_index : nat32;
  content : blob;
  crc32 : opt nat32;
};
type UpdateFileChunkOutput = record { updated_at : nat64; filled : nat64 };
type UpdateFileInput = record {
  id : nat32;
  status : opt int8;
  custom : opt vec record { text; MetadataValue };
  hash : opt blob;
  name : opt text;
  content_type : opt text;
};
type UpdateFileOutput = record { updated_at : nat64 };
type UpdateFolderInput = record {
  id : nat32;
  status : opt int8;
  name : opt text;
};
type UpgradeArgs = record {
  max_custom_data_size : opt nat16;
  max_children : opt nat16;
  enable_hash_index : opt bool;
  max_file_size : opt nat64;
  max_folder_depth : opt nat8;
};
type WalletReceiveResult = record { accepted : nat64 };
service : (opt CanisterArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  admin_set_auditors : (vec principal) -> (Result);
  admin_set_managers : (vec principal) -> (Result);
  admin_update_bucket : (UpdateBucketInput) -> (Result);
  api_version : () -> (nat16) query;
  batch_delete_subfiles : (nat32, vec nat32, opt blob) -> (Result_1);
  create_file : (CreateFileInput, opt blob) -> (Result_2);
  create_folder : (CreateFolderInput, opt blob) -> (Result_2);
  delete_file : (nat32, opt blob) -> (Result_3);
  delete_folder : (nat32, opt blob) -> (Result_3);
  get_bucket_info : (opt blob) -> (Result_4) query;
  get_file_ancestors : (nat32, opt blob) -> (Result_5) query;
  get_file_chunks : (nat32, nat32, opt nat32, opt blob) -> (Result_6) query;
  get_file_info : (nat32, opt blob) -> (Result_7) query;
  get_file_info_by_hash : (blob, opt blob) -> (Result_7) query;
  get_folder_ancestors : (nat32, opt blob) -> (Result_5) query;
  get_folder_info : (nat32, opt blob) -> (Result_8) query;
  list_files : (nat32, opt nat32, opt nat32, opt blob) -> (Result_9) query;
  list_folders : (nat32, opt nat32, opt nat32, opt blob) -> (Result_10) query;
  move_file : (MoveInput, opt blob) -> (Result_11);
  move_folder : (MoveInput, opt blob) -> (Result_11);
  update_file_chunk : (UpdateFileChunkInput, opt blob) -> (Result_12);
  update_file_info : (UpdateFileInput, opt blob) -> (Result_11);
  update_folder_info : (UpdateFolderInput, opt blob) -> (Result_11);
  validate_admin_set_auditors : (vec principal) -> (Result);
  validate_admin_set_managers : (vec principal) -> (Result);
  validate_admin_update_bucket : (UpdateBucketInput) -> (Result);
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
}