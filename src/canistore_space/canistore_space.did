type Album = record {
  id : nat64;
  sub_category : opt MusicCategory;
  status : AlbumStatus;
  external_link : text;
  title : text;
  created : nat64;
  toped : nat64;
  subscriber_count : nat32;
  allow_comments : bool;
  track_ids : vec nat64;
  cover_image : text;
  tags : vec text;
  album_stat : AlbumStat;
  album_type : AlbumType;
  description : text;
  subscription_prices : vec SubscriptionPrice;
  is_original : bool;
  likes : nat32;
  language : text;
  version : nat32;
  subscribers : vec SubscriberInfo;
  updated : nat64;
  release_at : opt nat64;
  category : MusicCategory;
  artist : text;
  comments : nat32;
  plays : nat64;
  producer : principal;
  dislikes : nat32;
  copyright : opt text;
  memory_usage : nat64;
};
type AlbumListEntry = record {
  id : nat64;
  sub_category : opt MusicCategory;
  title : text;
  created : nat64;
  cover_image : text;
  description : text;
  updated : nat64;
  release_at : opt nat64;
  category : MusicCategory;
  track_count : nat64;
  producer : principal;
};
type AlbumStat = record {
  total : nat32;
  public_count : nat32;
  subscription_count : nat32;
  draft_count : nat32;
  private_count : nat32;
};
type AlbumStatus = variant { Private; Draft; Public; Deleted; Subscription };
type AlbumType = variant { EP; Playlist; Channel; Album; Single };
type AssetType = variant {
  RecordingWithVocals;
  SoundFX;
  RecordingInstrumental;
  AudioSample;
};
type Attribute = record { key : text; value : text };
type AudioFile = record { canister_id : principal; file_id : nat32 };
type AwardPrice = record { aid : text };
type CanisterArgs = variant {
  Upgrade : SpaceUpgradeArgs;
  Init : SpaceInitArgs;
};
type CanisterDeploy = record {
  deploy_at : nat64;
  canister : principal;
  wasm_hash : blob;
  wasm_name : text;
};
type Category = record {
  id : nat32;
  desc : text;
  category_type : MusicCategory;
  parent : opt nat32;
};
type ChannelType = variant { User; Platform; Merchant; Other };
type CreateAlbumArg = record {
  sub_category : opt MusicCategory;
  external_link : text;
  title : text;
  cover_image : text;
  tags : vec text;
  album_type : AlbumType;
  description : text;
  subscription_prices : vec SubscriptionPrice;
  is_original : bool;
  language : text;
  release_at : opt nat64;
  category : MusicCategory;
  artist : text;
  producer : opt principal;
  copyright : opt text;
};
type CreateTrackArg = record {
  audio_file : AudioFile;
  duration : opt nat64;
  file_format : text;
  name : text;
  file_size : nat64;
  collaborators : vec text;
  songwriter : bool;
  instrumental : bool;
  is_explicit_lyrics : bool;
  versions : opt TrackVersion;
  is_radio_edition : bool;
};
type CreateTrackLicenseArg = record {
  fee : opt nat;
  user_pid : principal;
  asset_type : vec AssetType;
  licensed_media : vec LicensedMedia;
  track_id : nat64;
  right_period : vec RightPeriod;
  channel : ChannelType;
  licensed_territory : vec LicensedTerritory;
  usage_rights : vec UsageRights;
};
type DaoStateInfo = record {
  is_open : bool;
  name : text;
  platform_canister_id : principal;
  user_canister_id : principal;
  sub_canisters : vec CanisterDeploy;
};
type EditAlbumArg = record {
  sub_category : opt MusicCategory;
  external_link : opt text;
  title : opt text;
  cover_image : opt text;
  tags : opt vec text;
  album_type : opt AlbumType;
  description : opt text;
  subscription_prices : opt vec SubscriptionPrice;
  is_original : opt bool;
  language : opt text;
  release_at : opt nat64;
  category : opt MusicCategory;
  artist : opt text;
  producer : opt principal;
  copyright : opt text;
};
type EditTrackArg = record {
  audio_file : opt AudioFile;
  duration : opt nat64;
  file_format : opt text;
  name : opt text;
  file_size : opt nat64;
  collaborators : opt vec text;
  songwriter : opt bool;
  instrumental : opt bool;
  is_explicit_lyrics : opt bool;
  versions : opt TrackVersion;
  is_radio_edition : opt bool;
};
type Environment = variant { Production; Test };
type LicenseKey = record { album_id : opt nat64; track_id : opt nat64 };
type LicenseListEntry = record {
  id : nat64;
  fee : opt nat;
  created : nat64;
  user : principal;
  start_time : nat64;
  resource_key : LicenseKey;
};
type LicensePrice = record {
  track_id : nat64;
  price : nat64;
  token_name : text;
};
type LicenseSource = variant { Track : Track; Album : Album };
type LicenseTrackListEntry = record {
  id : nat64;
  fee : opt nat;
  created : nat64;
  track : Track;
  user : principal;
  start_time : nat64;
  resource_key : LicenseKey;
};
type LicensedMedia = variant { Exclusive; AllMedia };
type LicensedTerritory = variant { Worldwide; ListedTerritories };
type MusicCategory = variant {
  Emo;
  Ska;
  SoulMusic;
  Britpop;
  CountryMusic;
  PopularMusic;
  Singing;
  EasyListening;
  MusicOfLatinAmerica;
  ElectronicDanceMusic;
  HeavyMetal;
  Funk;
  Jazz;
  KPop;
  Reggae;
  Rock;
  HardRock;
  ChristianMusic;
  SynthPop;
  ProgressiveRock;
  Blues;
  IndieRock;
  PopMusic;
  Grunge;
  HouseMusic;
  Disco;
  FolkMusic;
  WorldMusic;
  NewAgeMusic;
  TranceMusic;
  IndianClassicalMusic;
  ExperimentalMusic;
  SwingMusic;
  Dubstep;
  ElectronicMusic;
  Metal;
  MusicOfAfrica;
  LatinMusic;
  PunkRock;
  DanceMusic;
  RhythmAndBlues;
  VocalMusic;
  ClassicalMusic;
  Bachata;
  Other;
  NewWave;
  Modernism;
  HipHopMusic;
  AlternativeRock;
  Flamenco;
  Techno;
};
type MusicCertificateResp = record { key : text; music_cert_hex : text };
type PaymentInfo = record {
  id : nat64;
  token : text;
  payment_type : PaymentType;
  recipient : blob;
  amount : nat64;
  created_time : nat64;
};
type PaymentStatus = variant {
  Refunded;
  Paid;
  Unpaid;
  Cancelled;
  TimedOut;
  Verifying;
};
type PaymentType = variant {
  Price : SubscriptionPrice;
  CreationPrice : TokenPrice;
  Verification : bool;
  Award : AwardPrice;
  LicensePrice : LicensePrice;
};
type QueryCommonReq = record { page : nat64; size : nat64; sort : QuerySort };
type QueryLicenseResp = record {
  id : nat64;
  fee : opt nat;
  revoke_time : opt nat64;
  created : nat64;
  asset_type : vec AssetType;
  source : LicenseSource;
  licensed_media : vec LicensedMedia;
  valid_duration : opt nat64;
  user : principal;
  start_time : nat64;
  resource_key : LicenseKey;
  right_period : vec RightPeriod;
  channel : ChannelType;
  licensed_territory : vec LicensedTerritory;
  usage_rights : vec UsageRights;
};
type QueryOrder = record {
  id : nat64;
  status : PaymentStatus;
  token : text;
  payment_type : PaymentType;
  source : text;
  verified_time : opt nat64;
  recipient : blob;
  amount_paid : nat64;
  payer : principal;
  shared_time : opt nat64;
  amount : nat64;
  created_time : nat64;
};
type QueryOrderResp = record {
  total : nat64;
  data : vec QueryOrder;
  page : nat64;
  has_more : bool;
};
type QuerySort = variant { TimeAsc; TimeDesc };
type QueryTrackResp = record {
  id : nat64;
  audio_file : AudioFile;
  album_id : opt nat64;
  created : nat64;
  duration : opt nat64;
  cert_hex : opt text;
  cert_key : opt text;
  public_at : nat64;
  name : text;
  has_share_store : bool;
  has_share : bool;
  collaborators : vec text;
  updated : nat64;
  songwriter : bool;
  artist : principal;
  instrumental : bool;
  is_explicit_lyrics : bool;
  versions : opt TrackVersion;
  is_radio_edition : bool;
  has_license : bool;
};
type Result = variant { Ok : text; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_10 = variant { Ok : Track; Err : text };
type Result_11 = variant { Ok : DaoStateInfo; Err : text };
type Result_12 = variant { Ok : principal; Err : text };
type Result_2 = variant { Ok : bool; Err : text };
type Result_3 = variant { Ok : nat64; Err : text };
type Result_4 = variant { Ok : Tokens; Err : text };
type Result_5 = variant { Ok : opt PaymentInfo; Err : text };
type Result_6 = variant { Ok : MusicCertificateResp; Err : text };
type Result_7 = variant { Ok : Album; Err : text };
type Result_8 = variant { Ok : vec QueryTrackResp; Err : text };
type Result_9 = variant { Ok : SpaceInfo; Err : text };
type RightPeriod = variant { Months12; Perpetuity; Years10; Years3; Years5 };
type SharedTrackListResp = record {
  channel_id : nat64;
  track : Track;
  created_at : nat64;
  track_id : nat64;
};
type SpaceInfo = record {
  env : Environment;
  categories : vec Category;
  status : nat8;
  max_oss_data_size : nat;
  created : nat64;
  store_track_ids : vec nat64;
  managers : vec principal;
  owner : principal;
  desc : text;
  max_albums : nat32;
  lang : text;
  name : text;
  cover : text;
  max_custom_data_size : nat16;
  total_subscribers : nat64;
  total_shares : nat64;
  total_post : nat64;
  total_view : nat64;
  total_albums : nat64;
  total_tracks : nat64;
  total_orders : nat64;
  subscribers : vec SubscriberInfo;
  canister : principal;
  oss_canister : vec principal;
  total_licenses : nat64;
  custom_url : text;
  max_track_files : nat32;
  dao_canister : principal;
  followers : vec principal;
  sub_prices : vec nat64;
  visibility : nat8;
  total_income : nat64;
  total_shares_album : nat64;
  services : vec text;
  total_followers : nat64;
  avatar : text;
};
type SpaceInitArgs = record {
  env : Environment;
  status : nat8;
  max_oss_data_size : nat;
  owner : principal;
  enable_search_index : bool;
  max_albums : nat32;
  name : text;
  max_tracks : nat32;
  max_custom_data_size : nat16;
  dao_canister : principal;
  visibility : nat8;
};
type SpaceUpgradeArgs = record {
  env : opt Environment;
  status : opt nat8;
  max_oss_data_size : opt nat;
  enable_search_index : opt bool;
  max_albums : opt nat32;
  max_tracks : opt nat32;
  max_custom_data_size : opt nat16;
  dao_canister : opt principal;
  visibility : opt nat8;
};
type StatusRequest = record {
  memory_size : bool;
  cycles : bool;
  heap_memory_size : bool;
};
type StatusResponse = record {
  memory_size : opt nat64;
  cycles : opt nat64;
  heap_memory_size : opt nat64;
};
type SubscriberInfo = record {
  pid : principal;
  created : nat64;
  expire_time : nat64;
  is_black : bool;
  sub_type : SubscriptionType;
};
type SubscriptionPrice = record { price : nat64; sub_type : SubscriptionType };
type SubscriptionType = variant {
  Free;
  Day180;
  Day360;
  Day30;
  Day90;
  Day1000;
  Permanent;
};
type Timestamp = record { timestamp_nanos : nat64 };
type TokenPrice = record { price : nat64; token_name : text };
type Tokens = record { e8s : nat64 };
type Track = record {
  id : nat64;
  audio_file : AudioFile;
  album_id : opt nat64;
  created : nat64;
  duration : opt nat64;
  cert_hex : opt text;
  cert_key : opt text;
  file_format : text;
  public_at : nat64;
  name : text;
  file_size : nat64;
  collaborators : vec text;
  attributes : vec Attribute;
  updated : nat64;
  songwriter : bool;
  artist : principal;
  instrumental : bool;
  is_explicit_lyrics : bool;
  versions : opt TrackVersion;
  is_radio_edition : bool;
};
type TrackVersion = variant { Live; Radio; Remix; Orginal };
type TransferArgs = record {
  to : blob;
  fee : Tokens;
  memo : nat64;
  from_subaccount : opt blob;
  created_at_time : opt Timestamp;
  amount : Tokens;
};
type UsageRights = variant { Commercial; NonCommercial };
type UserPost = record { post_id : nat64; content : text; created_at : nat64 };
type WalletReceiveResult = record { accepted : nat64 };
service : (opt CanisterArgs) -> {
  __get_candid_interface_tmp_hack : () -> (text) query;
  add_contract_services : (text) -> (Result);
  add_managers : (vec principal) -> (Result_1);
  add_track_attribute : (nat64, Attribute) -> (Result_2);
  add_track_ids_to_album : (nat64, vec nat64) -> (Result_1);
  add_track_license_for_platform : (nat64) -> (Result_3);
  api_version : () -> (nat16) query;
  canister_account : () -> (blob) query;
  canister_balance : () -> (Result_4);
  canister_get_status : (StatusRequest) -> (StatusResponse) query;
  canister_transfer : (TransferArgs) -> (Result_2);
  confirm_award_order : (nat64) -> (Result_2);
  confirm_license_order : (nat64) -> (Result_3);
  create_album : (CreateAlbumArg) -> (Result_3);
  create_award_order : (text, text, nat64, PaymentType) -> (Result_5);
  create_license_order : (nat64, text) -> (Result_5);
  create_music_certificate : (nat64) -> (Result_6);
  create_post : (text) -> (Result);
  create_track : (CreateTrackArg) -> (Result_3);
  create_track_license : (CreateTrackLicenseArg) -> (Result_3);
  delete_album : (nat64) -> (Result);
  delete_post : (nat64) -> (Result_1);
  delete_track : (nat64) -> (Result_1);
  delete_track_license : (nat64) -> (Result_3);
  edit_album : (nat64, EditAlbumArg) -> (Result_1);
  edit_track : (nat64, EditTrackArg) -> (Result_1);
  get_album_info : (nat64) -> (Result_7) query;
  get_album_tracks_list : (nat64) -> (Result_8) query;
  get_albums_list : (nat64, nat64) -> (vec AlbumListEntry) query;
  get_license_by_track : (nat64, principal) -> (opt QueryLicenseResp) query;
  get_license_list : (nat64, nat64) -> (vec LicenseListEntry) query;
  get_post_list : (nat64, nat64) -> (vec UserPost) query;
  get_public_track_ids : () -> (vec nat64) query;
  get_share_list : (nat64, nat64) -> (vec SharedTrackListResp) query;
  get_share_store_list : (nat64, nat64) -> (vec Track) query;
  get_share_store_track_ids : (vec nat64) -> (vec Track) query;
  get_space_info : () -> (Result_9) query;
  get_total_tracks : () -> (nat64) query;
  get_track_info : (nat64) -> (Result_10) query;
  get_track_license_list : (nat64, nat64) -> (vec LicenseTrackListEntry) query;
  query_orders : (QueryCommonReq) -> (QueryOrderResp) query;
  refund_payment_order : (nat64, blob) -> (Result_2);
  remote_batch_share_track_to_platform : (
      vec nat64,
      opt nat64,
      opt vec text,
      opt vec text,
      opt vec vec Attribute,
    ) -> (Result_1);
  remote_delete_share_track_to_platform : (nat64) -> (Result_1);
  remote_get_dao_info : () -> (Result_11);
  remote_send_post_message : () -> (Result);
  remote_share_track_to_platform : (
      nat64,
      opt nat64,
      opt text,
      opt text,
      opt vec Attribute,
    ) -> (Result_1);
  remove_contract_services : (text) -> (Result);
  remove_track_ids_to_album : (nat64, vec nat64) -> (Result_1);
  remove_track_license_for_platform : (nat64) -> (Result_1);
  update_dao_canister : (principal) -> (Result_12);
  wallet_balance : () -> (nat) query;
  wallet_receive : () -> (WalletReceiveResult);
}